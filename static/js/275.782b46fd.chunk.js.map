{"version":3,"file":"static/js/275.782b46fd.chunk.js","mappings":"sLAEaA,E,QAAOC,GAAAA,EAAH,kE,uGCAJC,EAAQD,EAAAA,GAAAA,GAAH,+EAMLE,EAAcF,EAAAA,GAAAA,GAAH,0F,6GC8BxB,UA/BiB,WACf,IAAQG,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAA0BE,EAAAA,EAAAA,UAAS,IAAnC,eAAOC,EAAP,KAAcC,EAAd,KAMA,OAJAC,EAAAA,EAAAA,YAAU,YACRC,EAAAA,EAAAA,IAAcN,GAASO,MAAK,gBAAGC,EAAH,EAAGA,KAAH,OAAcJ,EAASI,EAAKC,WACvD,CAACT,KAGF,4BACE,wBACGG,EAAMO,KACL,SAAAD,GAAI,OACoB,OAAtBA,EAAKE,mBACiBC,IAAtBH,EAAKE,eACH,2BACE,gBACEE,IAAG,yCAAoCJ,EAAKE,cAC5CG,IAAI,MAEN,SAAC,IAAD,UAAcL,EAAKM,iBACnB,UAAC,IAAD,yBAAkBN,EAAKO,eANhBP,EAAKQ,UAWtB,SAAC,KAAD,S,wMCjCOC,EAAU,mCACVC,EAAW,+B,UCMlBC,G,QAAS,SAAAC,GACb,OAAOC,EAAAA,GAAAA,MAAA,UAAeD,GAAW,CAC/BE,SAAU,YACVC,UAAW,IACXC,iBAAiB,EACjBC,cAAc,EACdC,cAAc,EACdC,WAAW,EACXC,cAAUjB,MAIP,SAAekB,IAAtB,4CAAO,OAAP,oBAAO,qFACLC,IAAAA,SAAAA,QAAA,UAA4BZ,GADvB,kBAGUY,IAAAA,IAAA,qBAAgC,CAC3CC,OAAQ,CACNC,QAASf,KALV,iGASIE,EAAO,KAAMC,UATjB,gFAaA,SAAea,EAAtB,+CAAO,OAAP,oBAAO,WAA+BC,GAA/B,wEACLJ,IAAAA,SAAAA,QAAA,UAA4BZ,GADvB,kBAGUY,IAAAA,IAAA,eAA0B,CACrCC,OAAQ,CACNC,QAASf,EACTkB,SAAU,QACVD,MAAOA,KAPR,iGAWIf,EAAO,KAAMC,UAXjB,gFAeA,SAAegB,EAAtB,+CAAO,OAAP,oBAAO,WAA6BrC,GAA7B,wEACL+B,IAAAA,SAAAA,QAAA,UAA4BZ,GADvB,kBAGUY,IAAAA,IAAA,gBAAmB/B,GAAW,CACzCgC,OAAQ,CACNC,QAASf,EACTkB,SAAU,WANX,iGAUIhB,EAAO,KAAMC,UAVjB,gFAcA,SAAef,EAAtB,+CAAO,OAAP,oBAAO,WAA6BN,GAA7B,wEACL+B,IAAAA,SAAAA,QAAA,UAA4BZ,GADvB,kBAGUY,IAAAA,IAAA,gBAAmB/B,EAAnB,YAAsC,CACjDgC,OAAQ,CACNC,QAASf,EACTkB,SAAU,WANX,iGAUIhB,EAAO,KAAMC,UAVjB,gFAcA,SAAeiB,EAAtB,+CAAO,OAAP,oBAAO,WAAgCtC,GAAhC,wEACL+B,IAAAA,SAAAA,QAAA,UAA4BZ,GADvB,kBAGUY,IAAAA,IAAA,gBAAmB/B,EAAnB,YAAsC,CACjDgC,OAAQ,CACNC,QAASf,EACTkB,SAAU,WANX,iGAUIhB,EAAO,KAAMC,UAVjB","sources":["components/Text/Text.styled.js","components/Title/Title.styled.js","pages/MovieDetails/CastList/CastList.jsx","constants/api-options.js","services/api-movies.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Text = styled.p`\n  font-size: 18px;\n  font-weight: 500;\n`;\n","import styled from 'styled-components';\n\nexport const Title = styled.h2`\n  font-size: 56px;\n  font-weight: 800;\n  margin: 0;\n`;\n\nexport const SecondTitle = styled.h3`\n  font-size: 32px;\n  font-weight: 600;\n  margin-bottom: 30px;\n`;\n","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { apiMoviesCast } from 'services/api-movies';\nimport { Text } from 'components/Text/Text.styled';\nimport { SecondTitle } from 'components/Title/Title.styled';\nimport { ToastContainer } from 'react-toastify';\n\nconst CastList = () => {\n  const { movieId } = useParams();\n  const [casts, setCasts] = useState([]);\n\n  useEffect(() => {\n    apiMoviesCast(movieId).then(({ data }) => setCasts(data.cast));\n  }, [movieId]);\n\n  return (\n    <div>\n      <ul>\n        {casts.map(\n          cast =>\n            cast.profile_path !== null &&\n            cast.profile_path !== undefined && (\n              <li key={cast.id}>\n                <img\n                  src={`https://image.tmdb.org/t/p/w200${cast.profile_path}`}\n                  alt=\"\"\n                />\n                <SecondTitle>{cast.original_name}</SecondTitle>\n                <Text>Character: {cast.character}</Text>\n              </li>\n            )\n        )}\n      </ul>\n      <ToastContainer />\n    </div>\n  );\n};\n\nexport default CastList;\n","export const API_KEY = 'f17c35877286387c8c7c530eb3e976d4';\nexport const BASE_URL = 'https://api.themoviedb.org/3';\n","import axios from 'axios';\nimport { API_KEY, BASE_URL } from 'constants/api-options';\nimport { toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\n// trending / movie / day;\n\nconst notify = message => {\n  return toast.error(`${message}`, {\n    position: 'top-right',\n    autoClose: 4000,\n    hideProgressBar: false,\n    closeOnClick: true,\n    pauseOnHover: true,\n    draggable: true,\n    progress: undefined,\n  });\n};\n\nexport async function apiMoviesTranding() {\n  axios.defaults.baseURL = `${BASE_URL}`;\n  try {\n    return await axios.get(`trending/movie/day`, {\n      params: {\n        api_key: API_KEY,\n      },\n    });\n  } catch (error) {\n    return notify(error.message);\n  }\n}\n\nexport async function apiMoviesSearch(query) {\n  axios.defaults.baseURL = `${BASE_URL}`;\n  try {\n    return await axios.get(`search/movie`, {\n      params: {\n        api_key: API_KEY,\n        language: 'en-US',\n        query: query,\n      },\n    });\n  } catch (error) {\n    return notify(error.message);\n  }\n}\n\nexport async function apiMoviesById(movieId) {\n  axios.defaults.baseURL = `${BASE_URL}`;\n  try {\n    return await axios.get(`movie/${movieId}`, {\n      params: {\n        api_key: API_KEY,\n        language: 'en-US',\n      },\n    });\n  } catch (error) {\n    return notify(error.message);\n  }\n}\n\nexport async function apiMoviesCast(movieId) {\n  axios.defaults.baseURL = `${BASE_URL}`;\n  try {\n    return await axios.get(`movie/${movieId}/credits`, {\n      params: {\n        api_key: API_KEY,\n        language: 'en-US',\n      },\n    });\n  } catch (error) {\n    return notify(error.message);\n  }\n}\n\nexport async function apiMoviesReviews(movieId) {\n  axios.defaults.baseURL = `${BASE_URL}`;\n  try {\n    return await axios.get(`movie/${movieId}/reviews`, {\n      params: {\n        api_key: API_KEY,\n        language: 'en-US',\n      },\n    });\n  } catch (error) {\n    return notify(error.message);\n  }\n}\n"],"names":["Text","styled","Title","SecondTitle","movieId","useParams","useState","casts","setCasts","useEffect","apiMoviesCast","then","data","cast","map","profile_path","undefined","src","alt","original_name","character","id","API_KEY","BASE_URL","notify","message","toast","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","apiMoviesTranding","axios","params","api_key","apiMoviesSearch","query","language","apiMoviesById","apiMoviesReviews"],"sourceRoot":""}